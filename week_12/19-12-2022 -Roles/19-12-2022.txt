//ders-1
1)İlk olarak layaoud da    asp-route-id="@User.Identity.Name" satrıını ekliyoruz
2)AccountControllae gelip Manege metotodnu yazmaya başlıyoruz
 public async Task<IActionResult> Manage(string id)
        {
            var name = id; 
            if (string.IsNullOrEmpty(id))
            {

buradan başlıyoruz

3)Dto klasörüne gelip UserManageDto classını oluştuuryruz ve entitydeki user clasınnda olan şeyelri copy paste ile alıp ekliyoruz
ve ekstra  public string Email { get; set; }
public string UserName  { get; set; }
 bunu ekliyoruz ve hata mesajlarını yazıyruz ve controllerda mange metotunu düzenlemeye devam ediyoruz

4)logindto daki userName i e mail adres yapıp controller ve cshtml de olan hatalı yerleri düzeltiyoruz
5)AccountControllae  addView diyeerk manage in viewini oluşturup registerdan copy paste yapıp düenlrmr yaptık
6)Manage.cshtmli düzenlemeye devam ediyoruz aynı zamanda yukarıdaki row un altındaki col-4 yapısını kaldırdık
7)maangeDto ya gelip public List<SelectListItem> MyProperty { get; set; }
 satırnı ekleyip
8)AccountControllera gelip  bu eklediğimiz satırları koymaya başlıyoruz
 List<SelectListItem> genderList = new List<SelectListItem>();
            genderList.Add(new SelectListItem
            {
                 Text="Kadın",
                 Value="Kadın",
                 Selected=user.Gender=="Kadın" ? true: false
            });
            genderList.Add(new SelectListItem
            {
                Text = "Erkek",
                Value = "Erkek",
                Selected = user.Gender == "Erkek" ? true : false
            });
bunları ekliyoruz
9)Manage.cshtml e gelip  <select asp-for="Gender" asp-items="@Model.GenderSelectList" class="form-select"> bu satırı düzenliyoruz
burada manage in post metodunu biz yapmaya çalıştık.Devamını hocadan aldım

//ders-2 Roller için işlemleree başlıyoruz
10)Entity nin concrete gelip identity de Role clası oluşturyozu ve miras aldıryoruz
11)sonra data katmanında context in içinde IdentityContext e gelip Role için düzenleme yapıyıruz
12)Program.cs e  gelip builder.Services.AddIdentity<User, Role>()
    .AddEntityFrameworkStores<IdentityContext>()  kısmını Role için düzenledik
13)Daha sonra  migraitons ve update işlmeelni yaptık ve veritanıda AspNetUsers tablonu 2 tane veri ekledik
14)Admindeki controllerda RoleController oluşturudk ve içini doldrumaya başladık Dependensi yaptık

15)admindeki modeldeki dtonun içine RoleDto classını oluşturuduk ve içini doldurmaya başladık

16)RoleControllera gdip indexin içini doldurmaya başlıyrıuz
17)RoleControllera gdip indexin içinde addView diyerek İndex.cshtml oluşturudk ve categorynin indexindekileir alıp copy paste yapıp
düzenledik
18)RoleControllea gelip Create metodunu oluşturp addView diyerek Create.cshtml oluştırp categorydeki craet.cshtml ii alıp copy paste apıp
düzenliyroz
19)RoleControollaerda 
   [HttpPost]
        public async Task<IActionResult> Create(RoleDto roleDto)
yapıp içini doldurmaya başlıyoruz
20)laytao gelip
 @if (TempData["Message"]!=null)
            {
                var msg = JsonConvert.DeserializeObject<AlertMessage>(TempData["Message"] as String);
                 <div class="row">
                     <div class="col-12">
                         <div class="alert alert-@msg.AlertType">
                            <div>@msg.Title</div>
                            <div>@msg.Message</div>
                         </div>
                     </div>
                 </div>
                    
            }
bu ksımı ekliyoruz
daha sonra Controllrda işlem yapmaya devam ediyoruz

//ders-3
21)Rol ün index.cshtml de if blogu koyuuoruz ve elsein içini dolduryoruz
22)RoleContrlllea gelip editin get ve post metotlarını oluşturup get metodundan başlıyoruz
get metodnu içini dolduryoruz
23)Admindeki Model deki Dto nun içine RoleDetailsDto adında class oluşturup içini doldurduk ve sonra RoleControllaera gelip edit ksımına ekleme 
yapıyoruz
24)RoleContrlllea da editin addView diyip Edit.cshtml oluşturp içini dolduryoruz
25)RoleControllea gelip editin post metodnu yazmaya başlıyoruz

ders-4
26)Role un edit.cshtml ine gelip 
  <input type="hidden" name="RoleId" value="@Model.Role.Id" />
    <input type="hidden" name="RoleName" value="@Model.Role.Name" />
satırlarını ekledik 
27)Admindeki Model daki  Dto clasöründe RoleEditDetailsDto classını oluituurp içini dolduruk
28)AccountControllara gelip 
 public IActionResult AccessDenied()
        {
            return View();
        }
satırını ekleyip addView diyerek viewi ını oluşturp içine bişeyler yazdık
29)Admindeki  controller ların categoryControlar ilgili yerlere  [Authorize(Roles ="Admin")] satırlarını ekledil
30)ProductConttrolerda en başa ekledik ve RoleControllerda da aynısnı yaptık
31)
32)
33)
34)
35)
36)
37)
38)
39)
40)