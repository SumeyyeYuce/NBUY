//ders-1

1)ProducDto ya gelip 
    public string ImageUrl { get; set; } bu satırı ekliyoruz 
Yani productDto ya dönüştürme sırasında ImageUrl i de alabiliyorız

2)Home kontroller gelip
ImageUrl= product.ImageUrl,  bu satırı ekle

3)sonra _prodyctPartial da düznelmee yapıyoruz
sonra index.cshtml e gidip ufak düzenleme yapıyoruz

4)Dah sonra web katmanında ViewCompomnets adlı klasör oluşturuyoruz onun içine de CategoriesViewComponent adlı classı oluşturyotuz ve içini dolduruyoruz
5)Web deki Shard da Componts adlı klasörü olşturuyoruz daha sonra onun içinde de Categories adlı klasöürü oluşturuyoruz

onun içinde de Default.cshtml olulştuurp içini dolduruyoruz

6)Program.cs e gelip route yapısjını oluştuuryoruz

7)Daha sonra controller'a gelip ShopController oluşturuyoruz
8)sonra productService ve managera gidip ikimetdoun adlarını değiştirypruz
9)Data katmanındaki IproductRepository gidip imzaları değiştiroruz
10)concrete içindeki repositorydeki EfCoreProductRepository gidip orda da dzenleme yapıyoruz
11)ShopController da ProdcutListe sag tık add view diyerek view oluşturduk ve index.cshtmldeki şeyleri copy paste yaptık





12)//2.Ders Devam

13)

14)ProductPARTİLA gelip inceleye tıklandıgında ne olucaksa onu yapmaya başlıyoruz
   asp-controller="Shop"
   asp-action="ProductDetails"
           asp-route-producturl=@Model.Url>İncele<

15)sonra ProductDto ya gelip Url ekliyoruz
16)sonra ShopControllerw gelip orda  Url=product.Url, bunu ekliyoruz
17)Ondan ssonra program.cs e gidip
app.MapControllerRoute(
    name: "productdetails",
    pattern: "{url?}",
    defaults: new { controller = "Shop", action = "ProductDetails" }
    );//shop/productDetails/İphone-13-pro
bunu ekliyoruz

18)ShopControllerda 
  public async Task<IActionResult> ProductDetails(string producturl)
        {
            return View();
        } 
bunu oluşturduk

19)ProductDetails bunun  view'ını oluşturudk


20)//3.Ders devam
21)program.cs a gelip
app.MapControllerRoute(
    name: "products",
    pattern: "kategori/{categoryurl?}",//produvt slaş üürn url diye çalışır
    defaults: new { controller = "Shop", action = "ProductList" }

    );


app.MapControllerRoute(
    name:"productDetails",
    pattern:"urunler/{producturl}",//produvt slaş üürn url diye çalışır
    defaults:new {controller="Shop",action="ProductDetails"}

    );
satırlarını ekledik


22)asp-route-producturl=@Model.Url>İncele</a> @*burdaki url'i program.cs deki url den anlıyor*@ Productpartial ekledik

23) public  IActionResult ProductDetails(string producturl)//buranın içeriisndeki parametreleri değiştirdil program.cs den gelen pattern adları
        {
            return View();
        }
burayı düzledik (aynı düzenlemeerli categoryurl içinde yaptık )


24)Default daki category.url yaptık ilgili yerleri


25)busines katmanında abstractın içinde IproductServise gelip
 Task<Product> GetProductDetailsByUrlAsync(string productUrl);
satırını ekledik

26)Daha sonra productManagera gelip implemte yapıp içini dolduryptuz
procytMANAGER DA  public async Task<Product> GetProductDetailsByUrlAsync(string productUrl)
        {
            return await _unitOfWork.Products.GetProductDetailsByUrlAsync(productUrl);
        }


27)Daha sonra data katamnıda IProductRepository gelip 
 Task<Product> GetProductDetailsByUrlAsync(string productUrl); satırını ekledik

28)Daha sonra concrete içindeki EfCoreProductRepository gidip implemnte yapıyoruz
public Task<Product> GetProductDetailsByUrlAsync(string productUrl)
        {
            //product bilgisni getir getirken de vategory ilgini getir
            return ShopAppContext
                .Products
                .Where(p => p.Url == productUrl)
                .Include(p => p.ProductCategories)
                .ThenInclude(pc => pc.Category)
                .FirstOrDefaultAsync();
        }

29)ShopController da ProductDetaili düzenlemye başladık
30)web deki Model deki Dto nun içine ProductDetailsDto oluşturuyoryz. ve içini dolduryoruz
31)ShopControllerı düzenlemeye devaö ediyoruz
ProductDetailsDto productDetailsDto = new ProductDetailsDto
            {
                Id= product.Id, 
                Name= product.Name, 
                Price= product.Price,   
                ImageUrl= product.ImageUrl, 
                Url=product
32)productDetailse gelip düzenleme yapıyoruz

//ders-4

33)Web katmanında Areas adlı klasör oluşturuyoruz onun için admin klasöreü onuniçine controller view ve model klaörlrii ekliyorz
34)Daha sonra prgran.cs gelip
app.MapAreaControllerRoute(
    name: "Admin",
    areaName:"Admin",//klaörden bahsettik
    pattern: "Admin/{controller=Home}/{action=Index}/{id?}");  
satırlarını ekliyoru
35)sonra admin in içinde controllerda home controller oluştruyrız
36)ondan sonra onun içinde index view oluşturytouz (sag tık addView)

37)Daha sonra Admin içindeki view de Shared klasörü açıyoruz onun içine layout.cshtml koyuyoruz
onun içini düzenliyorz ve css js linklerini koyuyıruz

38) Admin deki index.cshtml e gidip layotu tanımlıyoruz ve içini doldurmaya başlıyoruz
39)viewimport ve startları viewin içine copyalayıp admindeki viewe yapıştırıyoruz

40)sonra admindeki controllerw CategoryController olışuryıryz 

41)Modelsa gelip dto klsöürü oluşturup  caetgoryListDto adında class oluşturyotuz
42)categoryController daki INdex'in viewini oluşturduk(category için)
43)Viewİmporta gelip  @using ShoppingApp.Web.Areas.Admin.Models.Dtos ekledik
44)web'in içindeki layouta gelip
<li class="nav-item">
   <a class="nav-link text-dark" asp-area="Admin" asp-controller="Home" asp-action="Index">Admin Panel</a>
  </li>
koyduk
